'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { ArrowLeft, Save, Trash2, Edit, X, Image as ImageIcon, Music, Video, File } from 'lucide-react';
import { getNoteById, updateNote, deleteNote, Note, MediaItem } from '@/lib/storage';
import { useSession } from 'next-auth/react';
import ReactMarkdown from 'react-markdown';
import MediaUploader from '@/components/MediaUploader';

export default function NotePage({ params }: { params: { id: string } }) {
  const { data: session } = useSession();
  const router = useRouter();
  const searchParams = useSearchParams();
  
  const [note, setNote] = useState<Note | null>(null);
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [media, setMedia] = useState<MediaItem[]>([]);
  const [isEditing, setIsEditing] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  // Load note data
  useEffect(() => {
    if (!session?.user?.email) return;
    
    const foundNote = getNoteById(session.user.email, params.id);
    if (foundNote) {
      setNote(foundNote);
      setTitle(foundNote.title);
      setContent(foundNote.content);
      setMedia(foundNote.media || []);
    }
    setIsLoading(false);
    
    // Check if we should be in edit mode
    const editMode = searchParams.get('edit') === 'true';
    if (editMode) {
      setIsEditing(true);
    }
  }, [params.id, session?.user?.email, searchParams]);

  const handleSave = () => {
    if (!note || !session?.user?.email) return;
    
    setIsSaving(true);
    updateNote(session.user.email, note.id, {
      title: title.trim() || 'Untitled Note',
      content: content.trim(),
      media,
      updatedAt: new Date().toISOString(),
    });
    setIsSaving(false);
    setIsEditing(false);
  };

  const handleDelete = () => {
    if (!note || !session?.user?.email) return;
    
    if (confirm('Are you sure you want to delete this note?')) {
      deleteNote(session.user.email, note.id);
      router.push('/');
    }
  };

  const handleMediaUpload = (newMedia: MediaItem) => {
    setMedia(prev => [...prev, newMedia]);
  };

  const handleMediaRemove = (mediaId: string) => {
    setMedia(prev => prev.filter(item => item.id !== mediaId));
  };

  const renderMedia = () => {
    if (!media || media.length === 0) return null;

    return (
      <div className="mt-8">
        <h3 className="text-xl font-semibold mb-4 flex items-center">
          <ImageIcon className="w-5 h-5 mr-2" />
          Media
        </h3>
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
          {media.map((item) => (
            <div key={item.id} className="relative group">
              <div className="aspect-square bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden flex items-center justify-center">
                {item.type === 'image' || item.type === 'gif' ? (
                  <img 
                    src={item.url} 
                    alt={item.name} 
                    className="w-full h-full object-cover"
                  />
                ) : item.type === 'audio' ? (
                  <div className="p-4 w-full">
                    <div className="bg-blue-100 dark:bg-blue-900/50 rounded-lg p-4 flex items-center space-x-2">
                      <Music className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                      <span className="text-sm text-gray-700 dark:text-gray-300 truncate">
                        {item.name}
                      </span>
                    </div>
                    <audio 
                      src={item.url} 
                      controls 
                      className="w-full mt-2"
                    />
                  </div>
                ) : item.type === 'video' ? (
                  <video 
                    src={item.url} 
                    controls 
                    className="w-full h-full object-contain bg-black"
                  />
                ) : (
                  <div className="p-4 text-center">
                    <File className="w-8 h-8 mx-auto text-gray-400" />
                    <span className="text-xs text-gray-500 dark:text-gray-400 line-clamp-2">
                      {item.name}
                    </span>
                  </div>
                )}
              </div>
              {isEditing && (
                <button
                  type="button"
                  onClick={() => handleMediaRemove(item.id)}
                  className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                  aria-label="Remove media"
                >
                  <X className="w-3 h-3" />
                </button>
              )}
            </div>
          ))}
        </div>
      </div>
    );
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (!note) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <h1 className="text-2xl font-bold mb-4">Note not found</h1>
        <Link 
          href="/" 
          className="text-blue-600 dark:text-blue-400 hover:underline"
        >
          Back to notes
        </Link>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      {/* Header with back button and actions */}
      <div className="flex items-center justify-between mb-8">
        <Link
          href="/"
          className="flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors"
        >
          <ArrowLeft className="h-5 w-5" />
          <span>Back to notes</span>
        </Link>

        <div className="flex items-center gap-3">
          {isEditing ? (
            <>
              <button
                onClick={() => setIsEditing(false)}
                className="px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white border border-gray-300 dark:border-gray-600 rounded-lg transition-colors hover:bg-gray-50 dark:hover:bg-gray-800"
              >
                Cancel
              </button>
              <button
                onClick={handleSave}
                disabled={isSaving}
                className="flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg transition-colors font-medium"
              >
                <Save className="h-4 w-4" />
                {isSaving ? 'Saving...' : 'Save'}
              </button>
            </>
          ) : (
            <>
              <button
                onClick={() => setIsEditing(true)}
                className="flex items-center gap-2 px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white border border-gray-300 dark:border-gray-600 rounded-lg transition-colors hover:bg-gray-50 dark:hover:bg-gray-800"
              >
                <Edit className="h-4 w-4" />
                Edit
              </button>
              <button
                onClick={handleDelete}
                className="flex items-center gap-2 px-4 py-2 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 border border-red-300 dark:border-red-600 rounded-lg transition-colors hover:bg-red-50 dark:hover:bg-red-900/20"
              >
                <Trash2 className="h-4 w-4" />
                Delete
              </button>
            </>
          )}
        </div>
      </div>

      {/* Note content */}
      {isEditing ? (
        <div className="space-y-6">
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            className="w-full text-3xl font-bold bg-transparent border-b border-gray-200 dark:border-gray-700 focus:border-blue-500 focus:outline-none py-2 mb-4"
            placeholder="Note title"
          />
          <textarea
            value={content}
            onChange={(e) => setContent(e.target.value)}
            className="w-full min-h-[300px] p-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Start writing your note..."
          />
          
          {/* Media uploader */}
          <div className="mt-6">
            <h3 className="text-lg font-medium mb-3">Add Media</h3>
            <MediaUploader 
              onMediaUpload={handleMediaUpload}
              onMediaRemove={handleMediaRemove}
              mediaItems={media}
            />
          </div>
          
          {renderMedia()}
        </div>
      ) : (
        <div className="prose dark:prose-invert max-w-none">
          <h1 className="text-3xl font-bold mb-6">{title || 'Untitled Note'}</h1>
          <div className="whitespace-pre-wrap mb-8">
            <ReactMarkdown>{content}</ReactMarkdown>
          </div>
          {renderMedia()}
        </div>
      )}

      {/* Tips for editing mode */}
      {isEditing && (
        <div className="mt-8 text-sm text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
          <h3 className="font-medium mb-2">Editing Tips:</h3>
          <ul className="space-y-1 list-disc list-inside">
            <li>Use markdown for formatting (e.g., **bold**, *italic*)</li>
            <li>Add links with [text](url)</li>
            <li>Create lists with - or 1.</li>
            <li>Drag and drop files to upload media</li>
          </ul>
        </div>
      )}
    </div>
  );
}
